% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/missingValuesImputation_ProteinLevel.R
\name{mv_imputation_protein}
\alias{mv_imputation_protein}
\alias{findMECBlock}
\alias{reIntroduceMEC}
\alias{wrapper.impute.KNN}
\alias{wrapper.impute.fixedValue}
\alias{wrapper.impute.pa}
\alias{wrapper.impute.detQuant}
\alias{getQuantile4Imp}
\alias{wrapper.impute.slsa}
\title{Finds the LAPALA}
\usage{
findMECBlock(obj, i)

reIntroduceMEC(obj, i, MECIndex)

wrapper.impute.KNN(obj = NULL, i, K)

wrapper.impute.fixedValue(obj, i, fixVal = 0, na.type)

wrapper.impute.pa(obj = NULL, i, q.min = 0.025)

wrapper.impute.detQuant(obj, i, qval = 0.025, factor = 1, na.type)

getQuantile4Imp(qdata, qval = 0.025, factor = 1)

wrapper.impute.slsa(obj = NULL, i = 1)
}
\arguments{
\item{obj}{An object of class \code{QFeatures}.}

\item{i}{xxx}

\item{MECIndex}{A data.frame that contains index of MEC (see findMECBlock)}

\item{K}{the number of neighbors.}

\item{fixVal}{A float.}

\item{na.type}{A string which indicates the type of missing values to impute.
Available values are: \code{NA} (for both POV and MEC), \code{POV}, \code{MEC}.}

\item{q.min}{Same as the function \code{impute.pa()} in the package \code{imp4p}}

\item{qval}{An expression set containing quantitative values of various
replicates}

\item{factor}{A scaling factor to multiply the imputation value with}
}
\value{
A data.frame containing the indexes of LAPALA

A list of two vectors, respectively containing the imputation values
and the rescaled imputation values
}
\description{
Methods available are:
\itemize{
\item wrapper.impute.detQuant():
This method is a wrapper of the function \code{impute.detQuant()} for objects
of class \code{MSnSet}
\item wrapper.impute.KNN(): Can impute only POV missing values. This method is
a wrapper for objects of class \code{QFeatures} and imputes missing values with
a fixed value. This function imputes the missing values condition by
condition.
\item wrapper.impute.slsa():
Imputation of peptides having no values in a biological condition. This
method is a wrapper to the function \code{impute.slsa()} of the package
\code{imp4p} adapted to an object of class \code{MSnSet}.
\item wrapper.impute.fixedValue():
This method is a wrapper to objects of class \code{MSnSet} and imputes
missing values with a fixed value.
\item wrapper.impute.pa():
Imputation of peptides having no values in a biological condition.
This method is a wrapper to the function \code{impute.pa} of the package
\code{imp4p} adapted to an object of class \code{MSnSet}.
}
}
\section{Utilities functions}{
\itemize{
\item findMECBlock(): xxx
\item reIntroduceMEC(): xxx
\item getQuantile4Imp():
Quantile imputation value definition. This method returns the q-th quantile
of each column of an expression set, up to a scaling factor
}
}

\examples{
data(Exp1_R25_pept, package="DaparToolshedData")
obj <- Exp1_R25_pept[seq_len(100)]
lapala <- findMECBlock(obj, 1)
na.type = c("Missing POV", "Missing MEC")
obj <- wrapper.impute.detQuant(obj, 1, na.type = na.type)
obj <- reIntroduceMEC(obj, 1, lapala)

obj <- Exp1_R25_pept[seq_len(10), ]
obj.imp.pov <- wrapper.impute.KNN(obj, 1, 3)

obj.imp.pov <- wrapper.impute.fixedValue(obj, 1, 0.001, na.type = "Missing POV")
obj.imp.mec <- wrapper.impute.fixedValue(obj, 1, 0.001, na.type = "Missing MEC")
obj.imp.na <- wrapper.impute.fixedValue(obj, 1, 0.001, na.type = c("Missing MEC", "Missing POV"))

obj.imp.pov <- wrapper.impute.pa(obj, 1)

qdata <- SummarizedExperiment::assay(obj[[1]])
quant <- getQuantile4Imp(qdata)

obj <- Exp1_R25_pept[seq_len(100)]
obj.slsa.pov <- wrapper.impute.slsa(obj, 1)




}
\author{
Samuel Wieczorek
}
