% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plots_boxplot.R, R/plots_corr_matrix.R,
%   R/plots_CV_dist.R, R/plots_density_plot.R, R/plots_heatmap.R,
%   R/plots_mv_histo.R, R/plots_mv_PerLinesHisto.R,
%   R/plots_mv_PerLinesHistoPerCondition.R, R/plots_pca.R, R/plots_violin.R,
%   R/mod_plots_density.R, R/mod_plots_heatmap.R
\name{boxPlotD_HC}
\alias{boxPlotD_HC}
\alias{corrMatrixD_HC}
\alias{CVDistD_HC}
\alias{densityPlotD_HC}
\alias{heatmapD}
\alias{heatmapForMissingValues}
\alias{mvHisto_HC}
\alias{mvPerLinesHisto_HC}
\alias{mvPerLinesHistoPerCondition_HC}
\alias{wrapper.pca}
\alias{plotPCA_Var}
\alias{plotPCA_Ind}
\alias{plotPCA_Eigen_hc}
\alias{violinPlotD}
\alias{mod_plots_density_ui}
\alias{mod_plots_density_server}
\alias{mod_plots_heatmap_ui}
\alias{mod_plots_heatmap_server}
\title{Builds a boxplot from a dataframe using the library \code{highcharter}}
\usage{
boxPlotD_HC(
  qData,
  conds,
  keyId = NULL,
  legend = NULL,
  palette = NULL,
  subset.view = NULL
)

corrMatrixD_HC(obj.se, names = NULL, rate = 0.5, showValues = TRUE)

CVDistD_HC(qData, conds = NULL, palette = NULL)

densityPlotD_HC(qData, conds, legend = NULL, palette = NULL)

heatmapD(qData, conds, distance = "euclidean", cluster = "complete")

heatmapForMissingValues(
  x,
  col = grDevices::heat.colors(100),
  srtCol = NULL,
  labCol = NULL,
  labRow = NULL,
  key = TRUE,
  key.title = NULL,
  main = NULL,
  ylab = NULL
)

mvHisto_HC(qData, conds, showValues = FALSE, palette = NULL)

mvPerLinesHisto_HC(qData)

mvPerLinesHistoPerCondition_HC(
  qData,
  conds,
  indLegend = "auto",
  palette = NULL
)

wrapper.pca(qData, condition, var.scaling = TRUE, ncp = NULL)

plotPCA_Var(res.pca = NULL, chosen.axes = c(1, 2))

plotPCA_Ind(res.pca, chosen.axes = c(1, 2))

plotPCA_Eigen_hc(res.pca)

violinPlotD(
  qData,
  conds,
  keyId,
  legend = NULL,
  palette = NULL,
  subset.view = NULL
)

mod_plots_density_ui(id)

mod_plots_density_server(id, obj, conds, legend = NULL, base_palette = NULL)

mod_plots_heatmap_ui(id)

mod_plots_heatmap_server(id, obj, conds, width = 900)
}
\arguments{
\item{qData}{Numeric matrix}

\item{conds}{xxx}

\item{keyId}{xxx}

\item{legend}{xxx}

\item{palette}{xxx}

\item{subset.view}{A vector of index indicating rows to highlight}

\item{obj.se}{An object of class 'SummarizedExperiment'}

\item{names}{A vector of strings which will be used as legend. The length
of 'names' must be equal to the number of samples in the dataset.}

\item{rate}{The rate parameter to control the exponential law for
the gradient of colors}

\item{showValues}{A logical that indicates wether numeric values should be
drawn above the bars.}

\item{distance}{The distance used by the clustering algorithm to compute
the dendrogram. See \code{help(heatmap.2)}}

\item{cluster}{the clustering algorithm used to build the dendrogram.
See \code{help(heatmap.2)}}

\item{x}{A matrix that contains quantitative data.}

\item{col}{Colors used for the image. Defaults to heat colors (heat.colors).}

\item{srtCol}{Angle of column conds, in degrees from horizontal}

\item{labCol}{Character vectors with column conds to use.}

\item{labRow}{Character vectors with row conds to use.}

\item{key}{Logical indicating whether a color-key should be shown.}

\item{key.title}{Main title of the color key. If set to NA no title will
be plotted.}

\item{main}{Main title; default to none.}

\item{ylab}{y-axis title; default to none.}

\item{indLegend}{The indice of the column names of \code{colData()}}

\item{condition}{xxx}

\item{var.scaling}{The dimensions to plot}

\item{ncp}{Number of dimensions kept in the results}

\item{res.pca}{Result of FactoMineR::PCA}

\item{chosen.axes}{The dimensions to plot}

\item{id}{shiny id}

\item{obj}{xxx}

\item{base_palette}{xxx}

\item{input}{internal}

\item{output}{internal}

\item{session}{internal}
}
\value{
A boxplot

A colored correlation matrix

A density plot

A density plot

A heatmap

A heatmap

A histogram

A bar plot

A bar plot

A list including eigenvalues of obj

A plot

A plot

A histogram

A violinplot

NA

NA

NA
}
\description{
Boxplot for quantitative proteomics data using the library \code{highcharter}

Builds a densityplot of the CV of entities in numeric matrix.
The CV is calculated for each condition present in the dataset
(see the slot \code{'Condition'} in the \code{colData()} DataFrame)

This function is a wrapper to 'heatmap.2' that displays a numeric matrix

This method plots a histogram of missing values.

This method plots a bar plot which represents the distribution of the
number of missing values (NA) per lines (ie proteins).

This method plots a bar plot which represents the distribution of the
number of missing values (NA) per lines (ie proteins) and per conditions.

The parameter 'conds' is used to generate the color palette.

A shiny Module.

A shiny Module.
}
\examples{
library(QFeatures)
Exp1_R25_pept <- readRDS(system.file("data", 'Exp1_R25_pept.rda', package="DaparToolshedData"))
qData <- assay(Exp1_R25_pept[[2]])
conds <- colData(Exp1_R25_pept)[["Condition"]]
key <- rowData(Exp1_R25_pept[[2]])[[metadata(Exp1_R25_pept)$keyId]]
boxPlotD_HC(qData, conds, keyId = key, conds, subset.view=seq_len(10))

library(QFeatures)
Exp1_R25_pept <- readRDS(system.file("data", 'Exp1_R25_pept.rda', package="DaparToolshedData"))
corrMatrixD_HC(Exp1_R25_pept[[2]])

library(QFeatures)
Exp1_R25_pept <- readRDS(system.file("data", 'Exp1_R25_pept.rda', package="DaparToolshedData"))
qData <- assay(Exp1_R25_pept[[2]])[seq_len(10),]
conds <- colData(Exp1_R25_pept)[["Condition"]]
CVDistD_HC(qData, conds)

library(QFeatures)
Exp1_R25_pept <- readRDS(system.file("data", 'Exp1_R25_pept.rda', package="DaparToolshedData"))
qData <- assay(Exp1_R25_pept[[2]])
conds <- colData(Exp1_R25_pept)[["Condition"]]
densityPlotD_HC(qData, conds)

legend <- colData(Exp1_R25_pept)[["Sample.name"]]
pal <- ExtendPalette(2, 'Dark2')
densityPlotD_HC(qData, conds, legend, palette=pal)

\donttest{
library(QFeatures)
Exp1_R25_prot <- readRDS(system.file("data", 'Exp1_R25_prot.rda', package="DaparToolshedData"))
conds <- colData(Exp1_R25_prot)[['Condition']]
qData <- assay(Exp1_R25_prot)
heatmapD(qData, conds)
}

library(QFeatures)
Exp1_R25_pept <- readRDS(system.file("data", 'Exp1_R25_pept.rda', package="DaparToolshedData"))
qData <- assay(Exp1_R25_pept[[2]])[1:1000,]
heatmapForMissingValues(qData)

library(QFeatures)
Exp1_R25_pept <- readRDS(system.file("data", 'Exp1_R25_pept.rda', package="DaparToolshedData"))
qData <- assay(Exp1_R25_pept[[2]])
conds <- colData(Exp1_R25_pept)$Condition
mvHisto_HC(qData, conds, showValues=TRUE)

pal <- ExtendPalette(2, 'Dark2')
mvHisto_HC(qData, conds, showValues=TRUE, palette = pal)


library(QFeatures)
Exp1_R25_pept <- readRDS(system.file("data", 'Exp1_R25_pept.rda', package="DaparToolshedData"))
qData <- assay(Exp1_R25_pept[[2]])
mvPerLinesHisto_HC(qData)

library(highcharter)
Exp1_R25_pept <- readRDS(system.file("data", 'Exp1_R25_pept.rda', package="DaparToolshedData"))
qData <- SummarizedExperiment::assay(Exp1_R25_pept[[2]])
conds <- SummarizedExperiment::colData(Exp1_R25_pept)$Condition
mvPerLinesHistoPerCondition_HC(qData, conds)
mvPerLinesHistoPerCondition_HC(qData, conds, palette = c('yellow', 'green'))

library(QFeatures)
Exp1_R25_pept <- readRDS(system.file("data", 'Exp1_R25_pept.rda', package="DaparToolshedData"))
qData <- assay(Exp1_R25_pept[[2]])
condition <- colData(Exp1_R25_pept)[["Condition"]]
res.pca <- wrapper.pca(qData, condition)

plotPCA_Var(res.pca)

plotPCA_Ind(res.pca)

plotPCA_Eigen_hc(res.pca)


library(QFeatures)
Exp1_R25_prot <- readRDS(system.file("data", 'Exp1_R25_prot.rda', package="DaparToolshedData"))
qData <- assay(Exp1_R25_prot[[2]])
key <- rowData(Exp1_R25_prot[[2]])[[ metadata(Exp1_R25_prot)[['keyId']] ]]
conds <- colData(Exp1_R25_prot)[["Condition"]]
violinPlotD(qData, conds, key, subset.view = seq_len(5))


data(ft)
ui <- fluidPage(
mod_plots_density_ui('plot')
)

server <- function(input, output, session) {
 data(ft)
 conds <- design(ft)$Condition
 legend <- design(ft)[["Sample.name"]]
  
 mod_plots_density_server('plot',
                           obj = reactive({ft}),
                           conds = reactive({conds}),
                           legend = reactive({legend}),
                           base_palette = reactive({Example_Palette()})
  )
}


shinyApp(ui=ui, server=server)
}
\author{
Samuel Wieczorek, Anais Courtier, Enora Fremy

Samuel Wieczorek, Enora Fremy

Samuel Wieczorek, Enora Fremy

Samuel Wieczorek, Enora Fremy

Samuel Wieczorek

Samuel Wieczorek, Enora Fremy

Samuel Wieczorek

Samuel Wieczorek, Enora Fremy

Samuel Wieczorek, Enora Fremy

Samuel Wieczorek, Enora Fremy

Samuel Wieczorek, Enora Fremy

Samuel Wieczorek, Enora Fremy

Samuel Wieczorek, Enora Fremy

Samuel Wieczorek, Anais Courtier, Enora Fremy
}
\keyword{internal}
